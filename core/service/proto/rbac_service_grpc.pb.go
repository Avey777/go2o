// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: rbac_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RbacServiceClient is the client API for RbacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacServiceClient interface {
	// 用户登录
	UserLogin(ctx context.Context, in *RbacLoginRequest, opts ...grpc.CallOption) (*RbacLoginResponse, error)
	// 获取JWT密钥
	GetJwtToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
	// 获取用户的信息
	GetUserResource(ctx context.Context, in *GetUserResRequest, opts ...grpc.CallOption) (*RbacUserResourceResponse, error)
	// 获取资源树形数据
	QueryResList(ctx context.Context, in *QueryPermResRequest, opts ...grpc.CallOption) (*QueryPermResResponse, error)
	// 移动资源顺序
	MoveResOrdinal(ctx context.Context, in *MoveResOrdinalRequest, opts ...grpc.CallOption) (*Result, error)
	// 部门树形数据
	DepartTree(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RbacTree, error)
	// 保存部门
	SavePermDept(ctx context.Context, in *SavePermDeptRequest, opts ...grpc.CallOption) (*SavePermDeptResponse, error)
	// 获取部门
	GetPermDept(ctx context.Context, in *PermDeptId, opts ...grpc.CallOption) (*SPermDept, error)
	// 删除部门
	DeletePermDept(ctx context.Context, in *PermDeptId, opts ...grpc.CallOption) (*Result, error)
	// 保存岗位
	SavePermJob(ctx context.Context, in *SavePermJobRequest, opts ...grpc.CallOption) (*SavePermJobResponse, error)
	// 获取岗位
	GetPermJob(ctx context.Context, in *PermJobId, opts ...grpc.CallOption) (*SPermJob, error)
	// 获取岗位列表
	QueryPermJobList(ctx context.Context, in *QueryPermJobRequest, opts ...grpc.CallOption) (*QueryPermJobResponse, error)
	// 删除岗位
	DeletePermJob(ctx context.Context, in *PermJobId, opts ...grpc.CallOption) (*Result, error)
	// 获取岗位分页数据
	PagingPermJob(ctx context.Context, in *PermJobPagingRequest, opts ...grpc.CallOption) (*PermJobPagingResponse, error)
	// 保存系统用户
	SavePermUser(ctx context.Context, in *SavePermUserRequest, opts ...grpc.CallOption) (*SavePermUserResponse, error)
	// 获取系统用户
	GetPermUser(ctx context.Context, in *PermUserId, opts ...grpc.CallOption) (*SPermUser, error)
	// 删除系统用户
	DeletePermUser(ctx context.Context, in *PermUserId, opts ...grpc.CallOption) (*Result, error)
	// 获取系统用户分页数据
	PagingPermUser(ctx context.Context, in *PermUserPagingRequest, opts ...grpc.CallOption) (*PermUserPagingResponse, error)
	// 保存角色
	SavePermRole(ctx context.Context, in *SavePermRoleRequest, opts ...grpc.CallOption) (*SavePermRoleResponse, error)
	// 保存角色
	UpdateRoleResource(ctx context.Context, in *UpdateRoleResRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取角色
	GetPermRole(ctx context.Context, in *PermRoleId, opts ...grpc.CallOption) (*SPermRole, error)
	// 获取角色列表
	QueryPermRoleList(ctx context.Context, in *QueryPermRoleRequest, opts ...grpc.CallOption) (*QueryPermRoleResponse, error)
	// 删除角色
	DeletePermRole(ctx context.Context, in *PermRoleId, opts ...grpc.CallOption) (*Result, error)
	// 获取角色分页数据
	PagingPermRole(ctx context.Context, in *PermRolePagingRequest, opts ...grpc.CallOption) (*PermRolePagingResponse, error)
	// 保存PermRes
	SavePermRes(ctx context.Context, in *SavePermResRequest, opts ...grpc.CallOption) (*SavePermResResponse, error)
	// 获取PermRes
	GetPermRes(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*SPermRes, error)
	// 删除PermRes
	DeletePermRes(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*Result, error)
}

type rbacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacServiceClient(cc grpc.ClientConnInterface) RbacServiceClient {
	return &rbacServiceClient{cc}
}

func (c *rbacServiceClient) UserLogin(ctx context.Context, in *RbacLoginRequest, opts ...grpc.CallOption) (*RbacLoginResponse, error) {
	out := new(RbacLoginResponse)
	err := c.cc.Invoke(ctx, "/RbacService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetJwtToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/RbacService/GetJwtToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetUserResource(ctx context.Context, in *GetUserResRequest, opts ...grpc.CallOption) (*RbacUserResourceResponse, error) {
	out := new(RbacUserResourceResponse)
	err := c.cc.Invoke(ctx, "/RbacService/GetUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) QueryResList(ctx context.Context, in *QueryPermResRequest, opts ...grpc.CallOption) (*QueryPermResResponse, error) {
	out := new(QueryPermResResponse)
	err := c.cc.Invoke(ctx, "/RbacService/QueryResList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) MoveResOrdinal(ctx context.Context, in *MoveResOrdinalRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/MoveResOrdinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DepartTree(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RbacTree, error) {
	out := new(RbacTree)
	err := c.cc.Invoke(ctx, "/RbacService/DepartTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SavePermDept(ctx context.Context, in *SavePermDeptRequest, opts ...grpc.CallOption) (*SavePermDeptResponse, error) {
	out := new(SavePermDeptResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SavePermDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetPermDept(ctx context.Context, in *PermDeptId, opts ...grpc.CallOption) (*SPermDept, error) {
	out := new(SPermDept)
	err := c.cc.Invoke(ctx, "/RbacService/GetPermDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeletePermDept(ctx context.Context, in *PermDeptId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeletePermDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SavePermJob(ctx context.Context, in *SavePermJobRequest, opts ...grpc.CallOption) (*SavePermJobResponse, error) {
	out := new(SavePermJobResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SavePermJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetPermJob(ctx context.Context, in *PermJobId, opts ...grpc.CallOption) (*SPermJob, error) {
	out := new(SPermJob)
	err := c.cc.Invoke(ctx, "/RbacService/GetPermJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) QueryPermJobList(ctx context.Context, in *QueryPermJobRequest, opts ...grpc.CallOption) (*QueryPermJobResponse, error) {
	out := new(QueryPermJobResponse)
	err := c.cc.Invoke(ctx, "/RbacService/QueryPermJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeletePermJob(ctx context.Context, in *PermJobId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeletePermJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) PagingPermJob(ctx context.Context, in *PermJobPagingRequest, opts ...grpc.CallOption) (*PermJobPagingResponse, error) {
	out := new(PermJobPagingResponse)
	err := c.cc.Invoke(ctx, "/RbacService/PagingPermJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SavePermUser(ctx context.Context, in *SavePermUserRequest, opts ...grpc.CallOption) (*SavePermUserResponse, error) {
	out := new(SavePermUserResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SavePermUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetPermUser(ctx context.Context, in *PermUserId, opts ...grpc.CallOption) (*SPermUser, error) {
	out := new(SPermUser)
	err := c.cc.Invoke(ctx, "/RbacService/GetPermUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeletePermUser(ctx context.Context, in *PermUserId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeletePermUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) PagingPermUser(ctx context.Context, in *PermUserPagingRequest, opts ...grpc.CallOption) (*PermUserPagingResponse, error) {
	out := new(PermUserPagingResponse)
	err := c.cc.Invoke(ctx, "/RbacService/PagingPermUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SavePermRole(ctx context.Context, in *SavePermRoleRequest, opts ...grpc.CallOption) (*SavePermRoleResponse, error) {
	out := new(SavePermRoleResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SavePermRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) UpdateRoleResource(ctx context.Context, in *UpdateRoleResRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/UpdateRoleResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetPermRole(ctx context.Context, in *PermRoleId, opts ...grpc.CallOption) (*SPermRole, error) {
	out := new(SPermRole)
	err := c.cc.Invoke(ctx, "/RbacService/GetPermRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) QueryPermRoleList(ctx context.Context, in *QueryPermRoleRequest, opts ...grpc.CallOption) (*QueryPermRoleResponse, error) {
	out := new(QueryPermRoleResponse)
	err := c.cc.Invoke(ctx, "/RbacService/QueryPermRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeletePermRole(ctx context.Context, in *PermRoleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeletePermRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) PagingPermRole(ctx context.Context, in *PermRolePagingRequest, opts ...grpc.CallOption) (*PermRolePagingResponse, error) {
	out := new(PermRolePagingResponse)
	err := c.cc.Invoke(ctx, "/RbacService/PagingPermRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SavePermRes(ctx context.Context, in *SavePermResRequest, opts ...grpc.CallOption) (*SavePermResResponse, error) {
	out := new(SavePermResResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SavePermRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetPermRes(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*SPermRes, error) {
	out := new(SPermRes)
	err := c.cc.Invoke(ctx, "/RbacService/GetPermRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeletePermRes(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeletePermRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServiceServer is the server API for RbacService service.
// All implementations must embed UnimplementedRbacServiceServer
// for forward compatibility
type RbacServiceServer interface {
	// 用户登录
	UserLogin(context.Context, *RbacLoginRequest) (*RbacLoginResponse, error)
	// 获取JWT密钥
	GetJwtToken(context.Context, *Empty) (*String, error)
	// 获取用户的信息
	GetUserResource(context.Context, *GetUserResRequest) (*RbacUserResourceResponse, error)
	// 获取资源树形数据
	QueryResList(context.Context, *QueryPermResRequest) (*QueryPermResResponse, error)
	// 移动资源顺序
	MoveResOrdinal(context.Context, *MoveResOrdinalRequest) (*Result, error)
	// 部门树形数据
	DepartTree(context.Context, *Empty) (*RbacTree, error)
	// 保存部门
	SavePermDept(context.Context, *SavePermDeptRequest) (*SavePermDeptResponse, error)
	// 获取部门
	GetPermDept(context.Context, *PermDeptId) (*SPermDept, error)
	// 删除部门
	DeletePermDept(context.Context, *PermDeptId) (*Result, error)
	// 保存岗位
	SavePermJob(context.Context, *SavePermJobRequest) (*SavePermJobResponse, error)
	// 获取岗位
	GetPermJob(context.Context, *PermJobId) (*SPermJob, error)
	// 获取岗位列表
	QueryPermJobList(context.Context, *QueryPermJobRequest) (*QueryPermJobResponse, error)
	// 删除岗位
	DeletePermJob(context.Context, *PermJobId) (*Result, error)
	// 获取岗位分页数据
	PagingPermJob(context.Context, *PermJobPagingRequest) (*PermJobPagingResponse, error)
	// 保存系统用户
	SavePermUser(context.Context, *SavePermUserRequest) (*SavePermUserResponse, error)
	// 获取系统用户
	GetPermUser(context.Context, *PermUserId) (*SPermUser, error)
	// 删除系统用户
	DeletePermUser(context.Context, *PermUserId) (*Result, error)
	// 获取系统用户分页数据
	PagingPermUser(context.Context, *PermUserPagingRequest) (*PermUserPagingResponse, error)
	// 保存角色
	SavePermRole(context.Context, *SavePermRoleRequest) (*SavePermRoleResponse, error)
	// 保存角色
	UpdateRoleResource(context.Context, *UpdateRoleResRequest) (*Result, error)
	// 获取角色
	GetPermRole(context.Context, *PermRoleId) (*SPermRole, error)
	// 获取角色列表
	QueryPermRoleList(context.Context, *QueryPermRoleRequest) (*QueryPermRoleResponse, error)
	// 删除角色
	DeletePermRole(context.Context, *PermRoleId) (*Result, error)
	// 获取角色分页数据
	PagingPermRole(context.Context, *PermRolePagingRequest) (*PermRolePagingResponse, error)
	// 保存PermRes
	SavePermRes(context.Context, *SavePermResRequest) (*SavePermResResponse, error)
	// 获取PermRes
	GetPermRes(context.Context, *PermResId) (*SPermRes, error)
	// 删除PermRes
	DeletePermRes(context.Context, *PermResId) (*Result, error)
	mustEmbedUnimplementedRbacServiceServer()
}

// UnimplementedRbacServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRbacServiceServer struct {
}

func (UnimplementedRbacServiceServer) UserLogin(context.Context, *RbacLoginRequest) (*RbacLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedRbacServiceServer) GetJwtToken(context.Context, *Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwtToken not implemented")
}
func (UnimplementedRbacServiceServer) GetUserResource(context.Context, *GetUserResRequest) (*RbacUserResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserResource not implemented")
}
func (UnimplementedRbacServiceServer) QueryResList(context.Context, *QueryPermResRequest) (*QueryPermResResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResList not implemented")
}
func (UnimplementedRbacServiceServer) MoveResOrdinal(context.Context, *MoveResOrdinalRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveResOrdinal not implemented")
}
func (UnimplementedRbacServiceServer) DepartTree(context.Context, *Empty) (*RbacTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartTree not implemented")
}
func (UnimplementedRbacServiceServer) SavePermDept(context.Context, *SavePermDeptRequest) (*SavePermDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePermDept not implemented")
}
func (UnimplementedRbacServiceServer) GetPermDept(context.Context, *PermDeptId) (*SPermDept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermDept not implemented")
}
func (UnimplementedRbacServiceServer) DeletePermDept(context.Context, *PermDeptId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermDept not implemented")
}
func (UnimplementedRbacServiceServer) SavePermJob(context.Context, *SavePermJobRequest) (*SavePermJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePermJob not implemented")
}
func (UnimplementedRbacServiceServer) GetPermJob(context.Context, *PermJobId) (*SPermJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermJob not implemented")
}
func (UnimplementedRbacServiceServer) QueryPermJobList(context.Context, *QueryPermJobRequest) (*QueryPermJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPermJobList not implemented")
}
func (UnimplementedRbacServiceServer) DeletePermJob(context.Context, *PermJobId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermJob not implemented")
}
func (UnimplementedRbacServiceServer) PagingPermJob(context.Context, *PermJobPagingRequest) (*PermJobPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingPermJob not implemented")
}
func (UnimplementedRbacServiceServer) SavePermUser(context.Context, *SavePermUserRequest) (*SavePermUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePermUser not implemented")
}
func (UnimplementedRbacServiceServer) GetPermUser(context.Context, *PermUserId) (*SPermUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermUser not implemented")
}
func (UnimplementedRbacServiceServer) DeletePermUser(context.Context, *PermUserId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermUser not implemented")
}
func (UnimplementedRbacServiceServer) PagingPermUser(context.Context, *PermUserPagingRequest) (*PermUserPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingPermUser not implemented")
}
func (UnimplementedRbacServiceServer) SavePermRole(context.Context, *SavePermRoleRequest) (*SavePermRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePermRole not implemented")
}
func (UnimplementedRbacServiceServer) UpdateRoleResource(context.Context, *UpdateRoleResRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleResource not implemented")
}
func (UnimplementedRbacServiceServer) GetPermRole(context.Context, *PermRoleId) (*SPermRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermRole not implemented")
}
func (UnimplementedRbacServiceServer) QueryPermRoleList(context.Context, *QueryPermRoleRequest) (*QueryPermRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPermRoleList not implemented")
}
func (UnimplementedRbacServiceServer) DeletePermRole(context.Context, *PermRoleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermRole not implemented")
}
func (UnimplementedRbacServiceServer) PagingPermRole(context.Context, *PermRolePagingRequest) (*PermRolePagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingPermRole not implemented")
}
func (UnimplementedRbacServiceServer) SavePermRes(context.Context, *SavePermResRequest) (*SavePermResResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePermRes not implemented")
}
func (UnimplementedRbacServiceServer) GetPermRes(context.Context, *PermResId) (*SPermRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermRes not implemented")
}
func (UnimplementedRbacServiceServer) DeletePermRes(context.Context, *PermResId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermRes not implemented")
}
func (UnimplementedRbacServiceServer) mustEmbedUnimplementedRbacServiceServer() {}

// UnsafeRbacServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacServiceServer will
// result in compilation errors.
type UnsafeRbacServiceServer interface {
	mustEmbedUnimplementedRbacServiceServer()
}

func RegisterRbacServiceServer(s grpc.ServiceRegistrar, srv RbacServiceServer) {
	s.RegisterService(&RbacService_ServiceDesc, srv)
}

func _RbacService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).UserLogin(ctx, req.(*RbacLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetJwtToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetJwtToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetJwtToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetJwtToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetUserResource(ctx, req.(*GetUserResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_QueryResList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPermResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).QueryResList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/QueryResList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).QueryResList(ctx, req.(*QueryPermResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_MoveResOrdinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveResOrdinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).MoveResOrdinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/MoveResOrdinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).MoveResOrdinal(ctx, req.(*MoveResOrdinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DepartTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DepartTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DepartTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DepartTree(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SavePermDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePermDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SavePermDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SavePermDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SavePermDept(ctx, req.(*SavePermDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetPermDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermDeptId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetPermDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetPermDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetPermDept(ctx, req.(*PermDeptId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeletePermDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermDeptId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeletePermDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeletePermDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeletePermDept(ctx, req.(*PermDeptId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SavePermJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePermJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SavePermJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SavePermJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SavePermJob(ctx, req.(*SavePermJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetPermJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetPermJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetPermJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetPermJob(ctx, req.(*PermJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_QueryPermJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPermJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).QueryPermJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/QueryPermJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).QueryPermJobList(ctx, req.(*QueryPermJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeletePermJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeletePermJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeletePermJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeletePermJob(ctx, req.(*PermJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_PagingPermJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermJobPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).PagingPermJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/PagingPermJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).PagingPermJob(ctx, req.(*PermJobPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SavePermUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePermUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SavePermUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SavePermUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SavePermUser(ctx, req.(*SavePermUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetPermUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetPermUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetPermUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetPermUser(ctx, req.(*PermUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeletePermUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeletePermUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeletePermUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeletePermUser(ctx, req.(*PermUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_PagingPermUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermUserPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).PagingPermUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/PagingPermUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).PagingPermUser(ctx, req.(*PermUserPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SavePermRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePermRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SavePermRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SavePermRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SavePermRole(ctx, req.(*SavePermRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_UpdateRoleResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).UpdateRoleResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/UpdateRoleResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).UpdateRoleResource(ctx, req.(*UpdateRoleResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetPermRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermRoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetPermRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetPermRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetPermRole(ctx, req.(*PermRoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_QueryPermRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPermRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).QueryPermRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/QueryPermRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).QueryPermRoleList(ctx, req.(*QueryPermRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeletePermRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermRoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeletePermRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeletePermRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeletePermRole(ctx, req.(*PermRoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_PagingPermRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermRolePagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).PagingPermRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/PagingPermRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).PagingPermRole(ctx, req.(*PermRolePagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SavePermRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePermResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SavePermRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SavePermRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SavePermRes(ctx, req.(*SavePermResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetPermRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermResId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetPermRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetPermRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetPermRes(ctx, req.(*PermResId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeletePermRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermResId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeletePermRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeletePermRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeletePermRes(ctx, req.(*PermResId))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacService_ServiceDesc is the grpc.ServiceDesc for RbacService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RbacService",
	HandlerType: (*RbacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _RbacService_UserLogin_Handler,
		},
		{
			MethodName: "GetJwtToken",
			Handler:    _RbacService_GetJwtToken_Handler,
		},
		{
			MethodName: "GetUserResource",
			Handler:    _RbacService_GetUserResource_Handler,
		},
		{
			MethodName: "QueryResList",
			Handler:    _RbacService_QueryResList_Handler,
		},
		{
			MethodName: "MoveResOrdinal",
			Handler:    _RbacService_MoveResOrdinal_Handler,
		},
		{
			MethodName: "DepartTree",
			Handler:    _RbacService_DepartTree_Handler,
		},
		{
			MethodName: "SavePermDept",
			Handler:    _RbacService_SavePermDept_Handler,
		},
		{
			MethodName: "GetPermDept",
			Handler:    _RbacService_GetPermDept_Handler,
		},
		{
			MethodName: "DeletePermDept",
			Handler:    _RbacService_DeletePermDept_Handler,
		},
		{
			MethodName: "SavePermJob",
			Handler:    _RbacService_SavePermJob_Handler,
		},
		{
			MethodName: "GetPermJob",
			Handler:    _RbacService_GetPermJob_Handler,
		},
		{
			MethodName: "QueryPermJobList",
			Handler:    _RbacService_QueryPermJobList_Handler,
		},
		{
			MethodName: "DeletePermJob",
			Handler:    _RbacService_DeletePermJob_Handler,
		},
		{
			MethodName: "PagingPermJob",
			Handler:    _RbacService_PagingPermJob_Handler,
		},
		{
			MethodName: "SavePermUser",
			Handler:    _RbacService_SavePermUser_Handler,
		},
		{
			MethodName: "GetPermUser",
			Handler:    _RbacService_GetPermUser_Handler,
		},
		{
			MethodName: "DeletePermUser",
			Handler:    _RbacService_DeletePermUser_Handler,
		},
		{
			MethodName: "PagingPermUser",
			Handler:    _RbacService_PagingPermUser_Handler,
		},
		{
			MethodName: "SavePermRole",
			Handler:    _RbacService_SavePermRole_Handler,
		},
		{
			MethodName: "UpdateRoleResource",
			Handler:    _RbacService_UpdateRoleResource_Handler,
		},
		{
			MethodName: "GetPermRole",
			Handler:    _RbacService_GetPermRole_Handler,
		},
		{
			MethodName: "QueryPermRoleList",
			Handler:    _RbacService_QueryPermRoleList_Handler,
		},
		{
			MethodName: "DeletePermRole",
			Handler:    _RbacService_DeletePermRole_Handler,
		},
		{
			MethodName: "PagingPermRole",
			Handler:    _RbacService_PagingPermRole_Handler,
		},
		{
			MethodName: "SavePermRes",
			Handler:    _RbacService_SavePermRes_Handler,
		},
		{
			MethodName: "GetPermRes",
			Handler:    _RbacService_GetPermRes_Handler,
		},
		{
			MethodName: "DeletePermRes",
			Handler:    _RbacService_DeletePermRes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac_service.proto",
}
