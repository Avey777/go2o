// Code generated by protoc-gen-go. DO NOT EDIT.
// source: item_service.proto

package proto // import "./"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ItemDetailRequest struct {
	ItemId               int64    `protobuf:"zigzag64,1,opt,name=ItemId,proto3" json:"ItemId"`
	ItemType             int32    `protobuf:"zigzag32,2,opt,name=ItemType,proto3" json:"ItemType"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemDetailRequest) Reset()         { *m = ItemDetailRequest{} }
func (m *ItemDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ItemDetailRequest) ProtoMessage()    {}
func (*ItemDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_7c199a8f9e69ff92, []int{0}
}
func (m *ItemDetailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemDetailRequest.Unmarshal(m, b)
}
func (m *ItemDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemDetailRequest.Marshal(b, m, deterministic)
}
func (dst *ItemDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDetailRequest.Merge(dst, src)
}
func (m *ItemDetailRequest) XXX_Size() int {
	return xxx_messageInfo_ItemDetailRequest.Size(m)
}
func (m *ItemDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDetailRequest proto.InternalMessageInfo

func (m *ItemDetailRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ItemDetailRequest) GetItemType() int32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

type PagingGoodsRequest struct {
	ItemType   EItemSalesType `protobuf:"varint,1,opt,name=ItemType,proto3,enum=EItemSalesType" json:"ItemType"`
	SellerId   int64          `protobuf:"varint,2,opt,name=sellerId,proto3" json:"sellerId"`
	CategoryId int64          `protobuf:"varint,3,opt,name=categoryId,proto3" json:"categoryId"`
	// 关键词
	Keyword              string         `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword"`
	Params               *SPagingParams `protobuf:"bytes,5,opt,name=params,proto3" json:"params"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PagingGoodsRequest) Reset()         { *m = PagingGoodsRequest{} }
func (m *PagingGoodsRequest) String() string { return proto.CompactTextString(m) }
func (*PagingGoodsRequest) ProtoMessage()    {}
func (*PagingGoodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_7c199a8f9e69ff92, []int{1}
}
func (m *PagingGoodsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagingGoodsRequest.Unmarshal(m, b)
}
func (m *PagingGoodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagingGoodsRequest.Marshal(b, m, deterministic)
}
func (dst *PagingGoodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagingGoodsRequest.Merge(dst, src)
}
func (m *PagingGoodsRequest) XXX_Size() int {
	return xxx_messageInfo_PagingGoodsRequest.Size(m)
}
func (m *PagingGoodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PagingGoodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PagingGoodsRequest proto.InternalMessageInfo

func (m *PagingGoodsRequest) GetItemType() EItemSalesType {
	if m != nil {
		return m.ItemType
	}
	return EItemSalesType_IT_NORMAL
}

func (m *PagingGoodsRequest) GetSellerId() int64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *PagingGoodsRequest) GetCategoryId() int64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *PagingGoodsRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *PagingGoodsRequest) GetParams() *SPagingParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type PagingShopGoodsRequest struct {
	ShopId               int64          `protobuf:"varint,1,opt,name=shopId,proto3" json:"shopId"`
	CategoryId           int64          `protobuf:"varint,2,opt,name=categoryId,proto3" json:"categoryId"`
	Params               *SPagingParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PagingShopGoodsRequest) Reset()         { *m = PagingShopGoodsRequest{} }
func (m *PagingShopGoodsRequest) String() string { return proto.CompactTextString(m) }
func (*PagingShopGoodsRequest) ProtoMessage()    {}
func (*PagingShopGoodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_7c199a8f9e69ff92, []int{2}
}
func (m *PagingShopGoodsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagingShopGoodsRequest.Unmarshal(m, b)
}
func (m *PagingShopGoodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagingShopGoodsRequest.Marshal(b, m, deterministic)
}
func (dst *PagingShopGoodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagingShopGoodsRequest.Merge(dst, src)
}
func (m *PagingShopGoodsRequest) XXX_Size() int {
	return xxx_messageInfo_PagingShopGoodsRequest.Size(m)
}
func (m *PagingShopGoodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PagingShopGoodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PagingShopGoodsRequest proto.InternalMessageInfo

func (m *PagingShopGoodsRequest) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *PagingShopGoodsRequest) GetCategoryId() int64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *PagingShopGoodsRequest) GetParams() *SPagingParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type SaleLabelItemsRequest_ struct {
	ShopId               int64          `protobuf:"varint,1,opt,name=shopId,proto3" json:"shopId"`
	LabelId              int32          `protobuf:"varint,2,opt,name=labelId,proto3" json:"labelId"`
	Params               *SPagingParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SaleLabelItemsRequest_) Reset()         { *m = SaleLabelItemsRequest_{} }
func (m *SaleLabelItemsRequest_) String() string { return proto.CompactTextString(m) }
func (*SaleLabelItemsRequest_) ProtoMessage()    {}
func (*SaleLabelItemsRequest_) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_service_7c199a8f9e69ff92, []int{3}
}
func (m *SaleLabelItemsRequest_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaleLabelItemsRequest_.Unmarshal(m, b)
}
func (m *SaleLabelItemsRequest_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaleLabelItemsRequest_.Marshal(b, m, deterministic)
}
func (dst *SaleLabelItemsRequest_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaleLabelItemsRequest_.Merge(dst, src)
}
func (m *SaleLabelItemsRequest_) XXX_Size() int {
	return xxx_messageInfo_SaleLabelItemsRequest_.Size(m)
}
func (m *SaleLabelItemsRequest_) XXX_DiscardUnknown() {
	xxx_messageInfo_SaleLabelItemsRequest_.DiscardUnknown(m)
}

var xxx_messageInfo_SaleLabelItemsRequest_ proto.InternalMessageInfo

func (m *SaleLabelItemsRequest_) GetShopId() int64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *SaleLabelItemsRequest_) GetLabelId() int32 {
	if m != nil {
		return m.LabelId
	}
	return 0
}

func (m *SaleLabelItemsRequest_) GetParams() *SPagingParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*ItemDetailRequest)(nil), "ItemDetailRequest")
	proto.RegisterType((*PagingGoodsRequest)(nil), "PagingGoodsRequest")
	proto.RegisterType((*PagingShopGoodsRequest)(nil), "PagingShopGoodsRequest")
	proto.RegisterType((*SaleLabelItemsRequest_)(nil), "SaleLabelItemsRequest_")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ItemServiceClient interface {
	// 获取商品的数据
	GetItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SItemDataResponse, error)
	// 保存商品的数据
	SaveItem(ctx context.Context, in *SaveItemRequest, opts ...grpc.CallOption) (*SaveItemResponse, error)
	// 根据SKU获取商品
	GetItemBySku(ctx context.Context, in *ItemBySkuRequest, opts ...grpc.CallOption) (*SUnifiedViewItem, error)
	// 获取商品用于销售的快照和信息
	GetItemAndSnapshot(ctx context.Context, in *GetItemAndSnapshotRequest, opts ...grpc.CallOption) (*ItemSnapshotResponse, error)
	// 获取商品交易快照,参数传递:snapshotId
	GetTradeSnapshot(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeSnapshot, error)
	// 获取SKU
	GetSku(ctx context.Context, in *SkuId, opts ...grpc.CallOption) (*SSku, error)
	// 设置商品货架状态
	ReviewItem(ctx context.Context, in *ItemReviewRequest, opts ...grpc.CallOption) (*Result, error)
	// 保存商品的会员价
	SaveLevelPrices(ctx context.Context, in *SaveLevelPriceRequest, opts ...grpc.CallOption) (*Result, error)
	// 商品标记为违规
	SignAsIllegal(ctx context.Context, in *ItemIllegalRequest, opts ...grpc.CallOption) (*Result, error)
	// 设置商品货架状态
	SetShelveState(ctx context.Context, in *ShelveStateRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取商品详细数据
	GetItemDetailData(ctx context.Context, in *ItemDetailRequest, opts ...grpc.CallOption) (*String, error)
	// 根据销售标签获取指定数目的商品
	GetValueGoodsBySaleLabel(ctx context.Context, in *GetItemsByLabelRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error)
	// 获取店铺分页上架的商品
	GetShopPagedOnShelvesGoods(ctx context.Context, in *PagingShopGoodsRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error)
	// 获取上架商品数据（分页）
	GetPagedOnShelvesItem(ctx context.Context, in *PagingGoodsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error)
	// 获取上架商品数据
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error)
	// 获取批发价格数组
	GetWholesalePriceArray(ctx context.Context, in *SkuId, opts ...grpc.CallOption) (*SWsSkuPriceListResponse, error)
	// 保存批发价格
	SaveWholesalePrice(ctx context.Context, in *SaveSkuPricesRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取批发折扣数组
	GetWholesaleDiscountArray(ctx context.Context, in *GetWsDiscountRequest, opts ...grpc.CallOption) (*SWsItemDiscountListResponse, error)
	// 保存批发折扣
	SaveWholesaleDiscount(ctx context.Context, in *SaveItemDiscountRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取所有的商品标签
	GetAllSaleLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemLabelListResponse, error)
	// 获取销售标签
	GetSaleLabel(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SItemLabel, error)
	// 保存销售标签
	SaveSaleLabel(ctx context.Context, in *SItemLabel, opts ...grpc.CallOption) (*Result, error)
	// 删除销售标签
	DeleteSaleLabel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 根据分页销售标签获取指定数目的商品
	GetPagedValueGoodsBySaleLabel_(ctx context.Context, in *SaleLabelItemsRequest_, opts ...grpc.CallOption) (*PagingGoodsResponse, error)
}

type itemServiceClient struct {
	cc *grpc.ClientConn
}

func NewItemServiceClient(cc *grpc.ClientConn) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SItemDataResponse, error) {
	out := new(SItemDataResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SaveItem(ctx context.Context, in *SaveItemRequest, opts ...grpc.CallOption) (*SaveItemResponse, error) {
	out := new(SaveItemResponse)
	err := c.cc.Invoke(ctx, "/ItemService/SaveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemBySku(ctx context.Context, in *ItemBySkuRequest, opts ...grpc.CallOption) (*SUnifiedViewItem, error) {
	out := new(SUnifiedViewItem)
	err := c.cc.Invoke(ctx, "/ItemService/GetItemBySku", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemAndSnapshot(ctx context.Context, in *GetItemAndSnapshotRequest, opts ...grpc.CallOption) (*ItemSnapshotResponse, error) {
	out := new(ItemSnapshotResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetItemAndSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetTradeSnapshot(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeSnapshot, error) {
	out := new(STradeSnapshot)
	err := c.cc.Invoke(ctx, "/ItemService/GetTradeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetSku(ctx context.Context, in *SkuId, opts ...grpc.CallOption) (*SSku, error) {
	out := new(SSku)
	err := c.cc.Invoke(ctx, "/ItemService/GetSku", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ReviewItem(ctx context.Context, in *ItemReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/ReviewItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SaveLevelPrices(ctx context.Context, in *SaveLevelPriceRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/SaveLevelPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SignAsIllegal(ctx context.Context, in *ItemIllegalRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/SignAsIllegal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SetShelveState(ctx context.Context, in *ShelveStateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/SetShelveState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemDetailData(ctx context.Context, in *ItemDetailRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/ItemService/GetItemDetailData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetValueGoodsBySaleLabel(ctx context.Context, in *GetItemsByLabelRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error) {
	out := new(PagingShopGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetValueGoodsBySaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetShopPagedOnShelvesGoods(ctx context.Context, in *PagingShopGoodsRequest, opts ...grpc.CallOption) (*PagingShopGoodsResponse, error) {
	out := new(PagingShopGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetShopPagedOnShelvesGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetPagedOnShelvesItem(ctx context.Context, in *PagingGoodsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error) {
	out := new(PagingGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetPagedOnShelvesItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*PagingGoodsResponse, error) {
	out := new(PagingGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetWholesalePriceArray(ctx context.Context, in *SkuId, opts ...grpc.CallOption) (*SWsSkuPriceListResponse, error) {
	out := new(SWsSkuPriceListResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetWholesalePriceArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SaveWholesalePrice(ctx context.Context, in *SaveSkuPricesRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/SaveWholesalePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetWholesaleDiscountArray(ctx context.Context, in *GetWsDiscountRequest, opts ...grpc.CallOption) (*SWsItemDiscountListResponse, error) {
	out := new(SWsItemDiscountListResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetWholesaleDiscountArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SaveWholesaleDiscount(ctx context.Context, in *SaveItemDiscountRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/SaveWholesaleDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetAllSaleLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ItemLabelListResponse, error) {
	out := new(ItemLabelListResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetAllSaleLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetSaleLabel(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SItemLabel, error) {
	out := new(SItemLabel)
	err := c.cc.Invoke(ctx, "/ItemService/GetSaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SaveSaleLabel(ctx context.Context, in *SItemLabel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/SaveSaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) DeleteSaleLabel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ItemService/DeleteSaleLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetPagedValueGoodsBySaleLabel_(ctx context.Context, in *SaleLabelItemsRequest_, opts ...grpc.CallOption) (*PagingGoodsResponse, error) {
	out := new(PagingGoodsResponse)
	err := c.cc.Invoke(ctx, "/ItemService/GetPagedValueGoodsBySaleLabel_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
type ItemServiceServer interface {
	// 获取商品的数据
	GetItem(context.Context, *Int64) (*SItemDataResponse, error)
	// 保存商品的数据
	SaveItem(context.Context, *SaveItemRequest) (*SaveItemResponse, error)
	// 根据SKU获取商品
	GetItemBySku(context.Context, *ItemBySkuRequest) (*SUnifiedViewItem, error)
	// 获取商品用于销售的快照和信息
	GetItemAndSnapshot(context.Context, *GetItemAndSnapshotRequest) (*ItemSnapshotResponse, error)
	// 获取商品交易快照,参数传递:snapshotId
	GetTradeSnapshot(context.Context, *Int64) (*STradeSnapshot, error)
	// 获取SKU
	GetSku(context.Context, *SkuId) (*SSku, error)
	// 设置商品货架状态
	ReviewItem(context.Context, *ItemReviewRequest) (*Result, error)
	// 保存商品的会员价
	SaveLevelPrices(context.Context, *SaveLevelPriceRequest) (*Result, error)
	// 商品标记为违规
	SignAsIllegal(context.Context, *ItemIllegalRequest) (*Result, error)
	// 设置商品货架状态
	SetShelveState(context.Context, *ShelveStateRequest) (*Result, error)
	// 获取商品详细数据
	GetItemDetailData(context.Context, *ItemDetailRequest) (*String, error)
	// 根据销售标签获取指定数目的商品
	GetValueGoodsBySaleLabel(context.Context, *GetItemsByLabelRequest) (*PagingShopGoodsResponse, error)
	// 获取店铺分页上架的商品
	GetShopPagedOnShelvesGoods(context.Context, *PagingShopGoodsRequest) (*PagingShopGoodsResponse, error)
	// 获取上架商品数据（分页）
	GetPagedOnShelvesItem(context.Context, *PagingGoodsRequest) (*PagingGoodsResponse, error)
	// 获取上架商品数据
	GetItems(context.Context, *GetItemsRequest) (*PagingGoodsResponse, error)
	// 获取批发价格数组
	GetWholesalePriceArray(context.Context, *SkuId) (*SWsSkuPriceListResponse, error)
	// 保存批发价格
	SaveWholesalePrice(context.Context, *SaveSkuPricesRequest) (*Result, error)
	// 获取批发折扣数组
	GetWholesaleDiscountArray(context.Context, *GetWsDiscountRequest) (*SWsItemDiscountListResponse, error)
	// 保存批发折扣
	SaveWholesaleDiscount(context.Context, *SaveItemDiscountRequest) (*Result, error)
	// 获取所有的商品标签
	GetAllSaleLabels(context.Context, *Empty) (*ItemLabelListResponse, error)
	// 获取销售标签
	GetSaleLabel(context.Context, *IdOrName) (*SItemLabel, error)
	// 保存销售标签
	SaveSaleLabel(context.Context, *SItemLabel) (*Result, error)
	// 删除销售标签
	DeleteSaleLabel(context.Context, *Int64) (*Result, error)
	// 根据分页销售标签获取指定数目的商品
	GetPagedValueGoodsBySaleLabel_(context.Context, *SaleLabelItemsRequest_) (*PagingGoodsResponse, error)
}

func RegisterItemServiceServer(s *grpc.Server, srv ItemServiceServer) {
	s.RegisterService(&_ItemService_serviceDesc, srv)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SaveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SaveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SaveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SaveItem(ctx, req.(*SaveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemBySku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemBySkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemBySku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItemBySku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemBySku(ctx, req.(*ItemBySkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemAndSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemAndSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemAndSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItemAndSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemAndSnapshot(ctx, req.(*GetItemAndSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetTradeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetTradeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetTradeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetTradeSnapshot(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetSku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetSku(ctx, req.(*SkuId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ReviewItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ReviewItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/ReviewItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ReviewItem(ctx, req.(*ItemReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SaveLevelPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLevelPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SaveLevelPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SaveLevelPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SaveLevelPrices(ctx, req.(*SaveLevelPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SignAsIllegal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIllegalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SignAsIllegal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SignAsIllegal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SignAsIllegal(ctx, req.(*ItemIllegalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SetShelveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShelveStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SetShelveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SetShelveState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SetShelveState(ctx, req.(*ShelveStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemDetailData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemDetailData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItemDetailData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemDetailData(ctx, req.(*ItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetValueGoodsBySaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetValueGoodsBySaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetValueGoodsBySaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetValueGoodsBySaleLabel(ctx, req.(*GetItemsByLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetShopPagedOnShelvesGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingShopGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetShopPagedOnShelvesGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetShopPagedOnShelvesGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetShopPagedOnShelvesGoods(ctx, req.(*PagingShopGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetPagedOnShelvesItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetPagedOnShelvesItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetPagedOnShelvesItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetPagedOnShelvesItem(ctx, req.(*PagingGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetWholesalePriceArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetWholesalePriceArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetWholesalePriceArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetWholesalePriceArray(ctx, req.(*SkuId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SaveWholesalePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSkuPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SaveWholesalePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SaveWholesalePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SaveWholesalePrice(ctx, req.(*SaveSkuPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetWholesaleDiscountArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWsDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetWholesaleDiscountArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetWholesaleDiscountArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetWholesaleDiscountArray(ctx, req.(*GetWsDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SaveWholesaleDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItemDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SaveWholesaleDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SaveWholesaleDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SaveWholesaleDiscount(ctx, req.(*SaveItemDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetAllSaleLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetAllSaleLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetAllSaleLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetAllSaleLabels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetSaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdOrName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetSaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetSaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetSaleLabel(ctx, req.(*IdOrName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SaveSaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SItemLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SaveSaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/SaveSaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SaveSaleLabel(ctx, req.(*SItemLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_DeleteSaleLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).DeleteSaleLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/DeleteSaleLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).DeleteSaleLabel(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetPagedValueGoodsBySaleLabel__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleLabelItemsRequest_)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetPagedValueGoodsBySaleLabel_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/GetPagedValueGoodsBySaleLabel_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetPagedValueGoodsBySaleLabel_(ctx, req.(*SaleLabelItemsRequest_))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
		{
			MethodName: "SaveItem",
			Handler:    _ItemService_SaveItem_Handler,
		},
		{
			MethodName: "GetItemBySku",
			Handler:    _ItemService_GetItemBySku_Handler,
		},
		{
			MethodName: "GetItemAndSnapshot",
			Handler:    _ItemService_GetItemAndSnapshot_Handler,
		},
		{
			MethodName: "GetTradeSnapshot",
			Handler:    _ItemService_GetTradeSnapshot_Handler,
		},
		{
			MethodName: "GetSku",
			Handler:    _ItemService_GetSku_Handler,
		},
		{
			MethodName: "ReviewItem",
			Handler:    _ItemService_ReviewItem_Handler,
		},
		{
			MethodName: "SaveLevelPrices",
			Handler:    _ItemService_SaveLevelPrices_Handler,
		},
		{
			MethodName: "SignAsIllegal",
			Handler:    _ItemService_SignAsIllegal_Handler,
		},
		{
			MethodName: "SetShelveState",
			Handler:    _ItemService_SetShelveState_Handler,
		},
		{
			MethodName: "GetItemDetailData",
			Handler:    _ItemService_GetItemDetailData_Handler,
		},
		{
			MethodName: "GetValueGoodsBySaleLabel",
			Handler:    _ItemService_GetValueGoodsBySaleLabel_Handler,
		},
		{
			MethodName: "GetShopPagedOnShelvesGoods",
			Handler:    _ItemService_GetShopPagedOnShelvesGoods_Handler,
		},
		{
			MethodName: "GetPagedOnShelvesItem",
			Handler:    _ItemService_GetPagedOnShelvesItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _ItemService_GetItems_Handler,
		},
		{
			MethodName: "GetWholesalePriceArray",
			Handler:    _ItemService_GetWholesalePriceArray_Handler,
		},
		{
			MethodName: "SaveWholesalePrice",
			Handler:    _ItemService_SaveWholesalePrice_Handler,
		},
		{
			MethodName: "GetWholesaleDiscountArray",
			Handler:    _ItemService_GetWholesaleDiscountArray_Handler,
		},
		{
			MethodName: "SaveWholesaleDiscount",
			Handler:    _ItemService_SaveWholesaleDiscount_Handler,
		},
		{
			MethodName: "GetAllSaleLabels",
			Handler:    _ItemService_GetAllSaleLabels_Handler,
		},
		{
			MethodName: "GetSaleLabel",
			Handler:    _ItemService_GetSaleLabel_Handler,
		},
		{
			MethodName: "SaveSaleLabel",
			Handler:    _ItemService_SaveSaleLabel_Handler,
		},
		{
			MethodName: "DeleteSaleLabel",
			Handler:    _ItemService_DeleteSaleLabel_Handler,
		},
		{
			MethodName: "GetPagedValueGoodsBySaleLabel_",
			Handler:    _ItemService_GetPagedValueGoodsBySaleLabel__Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item_service.proto",
}

func init() { proto.RegisterFile("item_service.proto", fileDescriptor_item_service_7c199a8f9e69ff92) }

var fileDescriptor_item_service_7c199a8f9e69ff92 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xb6, 0x9b, 0xc5, 0x4e, 0x2f, 0x6d, 0x12, 0x33, 0xb3, 0xa3, 0x0a, 0x43, 0x17, 0x08, 0xc3,
	0x6a, 0xa0, 0x18, 0xb3, 0x79, 0x41, 0xbf, 0xac, 0x5f, 0x12, 0xa4, 0x30, 0x04, 0x04, 0x4b, 0x2a,
	0x76, 0x0d, 0xb0, 0x2f, 0x01, 0x63, 0xdd, 0x64, 0xc1, 0xb4, 0xa8, 0x89, 0x94, 0x3b, 0xff, 0xba,
	0xfd, 0x8f, 0xfd, 0x9a, 0x81, 0xd4, 0x4b, 0xa4, 0xc4, 0xed, 0xf6, 0xc9, 0xba, 0x87, 0x77, 0xcf,
	0x3d, 0xbc, 0x17, 0x1a, 0x48, 0xac, 0x71, 0x79, 0xab, 0x30, 0x5b, 0xc5, 0x33, 0xa4, 0x69, 0x26,
	0xb5, 0x74, 0x9f, 0x45, 0x42, 0xde, 0x71, 0x51, 0x5a, 0xa3, 0x25, 0x2a, 0xc5, 0x23, 0x3c, 0xb1,
	0x9e, 0xa1, 0x96, 0x05, 0xee, 0x4d, 0x61, 0xe0, 0x6b, 0x5c, 0x5e, 0xa0, 0xe6, 0xb1, 0x08, 0xf0,
	0xcf, 0x1c, 0x95, 0x26, 0x23, 0xe8, 0x19, 0xd0, 0x0f, 0x9d, 0xee, 0x71, 0x77, 0x4c, 0x82, 0xd2,
	0x22, 0x2e, 0xec, 0x98, 0xaf, 0x0f, 0xeb, 0x14, 0x9d, 0x27, 0xc7, 0xdd, 0xf1, 0x20, 0xa8, 0x6d,
	0xef, 0xef, 0x2e, 0x90, 0x6b, 0x1e, 0xc5, 0x49, 0x34, 0x95, 0x32, 0x54, 0x15, 0xd5, 0xeb, 0x46,
	0x88, 0x21, 0xdb, 0x9b, 0xec, 0xd3, 0x77, 0x06, 0x61, 0x5c, 0xa0, 0x32, 0xf0, 0x3d, 0x87, 0xe1,
	0x57, 0x28, 0x04, 0x66, 0x7e, 0x68, 0xf9, 0xb7, 0x82, 0xda, 0x26, 0x2f, 0x01, 0x66, 0x5c, 0x63,
	0x24, 0xb3, 0xb5, 0x1f, 0x3a, 0x5b, 0xf6, 0xb4, 0x81, 0x10, 0x07, 0xfa, 0x0b, 0x5c, 0x7f, 0x92,
	0x59, 0xe8, 0x7c, 0x75, 0xdc, 0x1d, 0x3f, 0x0d, 0x2a, 0x93, 0x7c, 0x0f, 0xbd, 0x94, 0x67, 0x7c,
	0xa9, 0x9c, 0xed, 0xe3, 0xee, 0x78, 0x77, 0xb2, 0x47, 0x59, 0x21, 0xf4, 0xda, 0xa2, 0x41, 0x79,
	0xea, 0xfd, 0x05, 0xa3, 0x02, 0x67, 0x73, 0x99, 0xb6, 0x2e, 0x31, 0x82, 0x9e, 0x9a, 0xcb, 0xb4,
	0xac, 0xc7, 0x56, 0x50, 0x5a, 0x0f, 0x34, 0x3d, 0x79, 0xa4, 0xe9, 0x3e, 0xf3, 0xd6, 0x17, 0x33,
	0x67, 0x30, 0x32, 0xe5, 0xb8, 0xe4, 0x77, 0x28, 0x4c, 0x31, 0xaa, 0xc4, 0xb7, 0x9f, 0xcd, 0xec,
	0x40, 0x5f, 0x58, 0xef, 0x22, 0xed, 0x76, 0x50, 0x99, 0xff, 0x37, 0xe7, 0xe4, 0x1f, 0x80, 0x5d,
	0xdb, 0x87, 0x62, 0x68, 0xc8, 0x2b, 0xe8, 0x4f, 0x51, 0x1b, 0x84, 0xf4, 0xa8, 0x9f, 0xe8, 0x37,
	0xa7, 0x2e, 0xa1, 0xcc, 0xce, 0x06, 0xd7, 0x3c, 0x40, 0x95, 0xca, 0x44, 0xa1, 0xd7, 0x21, 0x3f,
	0xc1, 0x0e, 0xe3, 0x2b, 0xb4, 0x9e, 0x07, 0xb4, 0xfa, 0x2c, 0x15, 0xbb, 0x83, 0x06, 0x52, 0x87,
	0xbc, 0x81, 0x67, 0x25, 0xf7, 0xf9, 0x9a, 0x2d, 0x72, 0x32, 0xa0, 0xf5, 0x77, 0x23, 0xee, 0xb7,
	0x24, 0xfe, 0x23, 0xc6, 0xf0, 0x63, 0x8c, 0x9f, 0xcc, 0xb1, 0xd7, 0x21, 0x3e, 0x90, 0x32, 0xee,
	0x2c, 0x09, 0x59, 0xc2, 0x53, 0x35, 0x97, 0x9a, 0xb8, 0xf4, 0x31, 0x58, 0xd1, 0x0c, 0x2d, 0xf3,
	0x3d, 0x5a, 0x4b, 0xf8, 0x01, 0x0e, 0xa6, 0xa8, 0x3f, 0x64, 0x3c, 0xc4, 0x9a, 0xa8, 0xba, 0xe7,
	0x3e, 0x65, 0xad, 0x03, 0xaf, 0x43, 0x5e, 0x40, 0x6f, 0x8a, 0xda, 0x68, 0xed, 0x51, 0xb6, 0xc8,
	0xfd, 0xd0, 0xdd, 0xa6, 0x8c, 0x2d, 0x72, 0xaf, 0x43, 0x5e, 0x03, 0x04, 0xb8, 0x2a, 0x45, 0x12,
	0x42, 0x8b, 0xbb, 0x1a, 0xa0, 0x12, 0xd1, 0xa7, 0x01, 0xaa, 0x5c, 0x18, 0x9e, 0x53, 0xd8, 0x37,
	0xf5, 0xb8, 0xc4, 0x15, 0x8a, 0xeb, 0x2c, 0x9e, 0xa1, 0x22, 0x23, 0xda, 0x46, 0x36, 0x44, 0x9d,
	0xc0, 0x73, 0x16, 0x47, 0xc9, 0x99, 0xf2, 0x85, 0xc0, 0x88, 0x0b, 0x72, 0x68, 0xb3, 0x94, 0xd6,
	0x86, 0x80, 0x1f, 0x61, 0x8f, 0xa1, 0x66, 0x73, 0x14, 0x2b, 0x64, 0x9a, 0x6b, 0x24, 0x87, 0xb4,
	0x61, 0x6d, 0x88, 0x98, 0xc0, 0xa0, 0xac, 0x62, 0xb1, 0xfa, 0xa6, 0xc9, 0xe5, 0x65, 0x5a, 0x6f,
	0x81, 0xdb, 0xa7, 0x4c, 0x67, 0x71, 0x12, 0x79, 0x1d, 0x72, 0x05, 0xce, 0x14, 0xf5, 0x47, 0x2e,
	0x72, 0xb4, 0xeb, 0x71, 0xbe, 0xae, 0xa7, 0x96, 0x1c, 0x55, 0x4d, 0x51, 0xe7, 0x6b, 0x8b, 0x54,
	0xf1, 0x0e, 0x7d, 0xb4, 0x54, 0x75, 0x53, 0xde, 0x83, 0x6b, 0xaa, 0x3c, 0x97, 0xe9, 0x35, 0x8f,
	0x30, 0xbc, 0x4a, 0x0a, 0xcd, 0xca, 0xfa, 0x91, 0x23, 0xba, 0x79, 0x1d, 0xbf, 0x48, 0x79, 0x01,
	0xc3, 0x29, 0xea, 0x36, 0x9d, 0x6d, 0xd4, 0x21, 0x7d, 0xfc, 0x3a, 0xb9, 0x5f, 0xb7, 0xc1, 0x9a,
	0xe5, 0x14, 0x76, 0xaa, 0xeb, 0x90, 0x83, 0xfa, 0x66, 0xff, 0x15, 0xf5, 0x16, 0x46, 0x53, 0xd4,
	0x37, 0x73, 0x29, 0x50, 0x71, 0x81, 0xb6, 0xbb, 0x67, 0x59, 0xc6, 0xd7, 0xf5, 0x10, 0x39, 0x94,
	0xdd, 0x28, 0xb6, 0xc8, 0xed, 0xd1, 0x65, 0xac, 0x74, 0x6b, 0x49, 0x88, 0x19, 0x8c, 0x76, 0x38,
	0x19, 0xda, 0x69, 0xa9, 0x42, 0xd4, 0x86, 0x4e, 0x06, 0xf0, 0xa2, 0x99, 0xf5, 0x22, 0x56, 0x33,
	0x99, 0x27, 0xba, 0x48, 0x3c, 0x34, 0xe2, 0x6f, 0x54, 0x05, 0x56, 0xe1, 0xdf, 0x18, 0x1d, 0xb6,
	0xd7, 0xe5, 0xc1, 0x03, 0x2d, 0x6f, 0x61, 0xd8, 0xd2, 0x52, 0xb9, 0x11, 0xa7, 0x5e, 0xef, 0x87,
	0x94, 0xad, 0xa1, 0x37, 0xbb, 0x76, 0x26, 0x44, 0x3d, 0x1e, 0x8a, 0xf4, 0xe8, 0xbb, 0x65, 0xaa,
	0xd7, 0xee, 0xc8, 0x8e, 0x98, 0x05, 0x1f, 0xe4, 0x1c, 0xdb, 0x47, 0xe2, 0x7e, 0xa2, 0x9e, 0x52,
	0x3f, 0xbc, 0xca, 0x7e, 0xe5, 0x4b, 0x74, 0x77, 0x8b, 0x87, 0xc8, 0xe2, 0x5e, 0x87, 0xbc, 0x82,
	0xe7, 0xb6, 0x28, 0xb5, 0x6b, 0xf3, 0xbc, 0x29, 0xe4, 0x3b, 0xd8, 0xbf, 0x40, 0x81, 0xba, 0xe1,
	0x5a, 0xed, 0x7c, 0xc3, 0xeb, 0x3d, 0xbc, 0xac, 0x46, 0x66, 0xe3, 0x6c, 0xdf, 0x92, 0x23, 0xba,
	0xf9, 0x79, 0xfe, 0xdc, 0x24, 0x9c, 0x7f, 0x0b, 0x87, 0x33, 0xb9, 0xa4, 0x51, 0xac, 0xe7, 0xf9,
	0x1d, 0x8d, 0xe4, 0x44, 0xd2, 0x2c, 0x9d, 0xfd, 0xbe, 0x43, 0x4f, 0x7e, 0xb1, 0x7f, 0xbb, 0x77,
	0x3d, 0xfb, 0xf3, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xce, 0x3c, 0x35, 0xb9, 0x07,
	0x00, 0x00,
}
